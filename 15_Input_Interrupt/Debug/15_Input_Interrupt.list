
15_Input_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  080001c0  080001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003f4  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  000013f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003ec  080003ec  000013f4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003ec  080003f4  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000013ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003f0  080003f0  000013f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003f4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003f4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bdc  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000026d  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00002270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004c  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019783  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000eb6  00000000  00000000  0001bab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f1e4  00000000  00000000  0001c96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000abb51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000cc  00000000  00000000  000abb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000abc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000000 	.word	0x20000000
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080003d4 	.word	0x080003d4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000004 	.word	0x20000004
 80001fc:	080003d4 	.word	0x080003d4

08000200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020e:	2b00      	cmp	r3, #0
 8000210:	db0b      	blt.n	800022a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	f003 021f 	and.w	r2, r3, #31
 8000218:	4907      	ldr	r1, [pc, #28]	@ (8000238 <__NVIC_EnableIRQ+0x38>)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	095b      	lsrs	r3, r3, #5
 8000220:	2001      	movs	r0, #1
 8000222:	fa00 f202 	lsl.w	r2, r0, r2
 8000226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	e000e100 	.word	0xe000e100

0800023c <PC13_Exti_Init>:
*/
#include "Exti.h"
#define GPIOCEN		(1U << 2)
#define SYSCFGEN	(1U << 14)
void PC13_Exti_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000240:	b672      	cpsid	i
}
 8000242:	bf00      	nop
	/*Disable Global Interrupt (Good Practice .. Does not affect the code) */
	__disable_irq(); // Built in function of ARM (feature)

	/*Enable Clock access for GPIOC (That is where the USR_BTN is connected)*/
	RCC->AHB1ENR |= GPIOCEN;
 8000244:	4b1b      	ldr	r3, [pc, #108]	@ (80002b4 <PC13_Exti_Init+0x78>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a1a      	ldr	r2, [pc, #104]	@ (80002b4 <PC13_Exti_Init+0x78>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30

	/*EXTI Is part of the SYSCFG Module so we have to enable the clock for it*/
	RCC->APB2ENR |=SYSCFGEN ;
 8000250:	4b18      	ldr	r3, [pc, #96]	@ (80002b4 <PC13_Exti_Init+0x78>)
 8000252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000254:	4a17      	ldr	r2, [pc, #92]	@ (80002b4 <PC13_Exti_Init+0x78>)
 8000256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800025a:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Make PC13 As input*/
	GPIOC->MODER &= ~(1U << 26);
 800025c:	4b16      	ldr	r3, [pc, #88]	@ (80002b8 <PC13_Exti_Init+0x7c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a15      	ldr	r2, [pc, #84]	@ (80002b8 <PC13_Exti_Init+0x7c>)
 8000262:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000266:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U << 27);
 8000268:	4b13      	ldr	r3, [pc, #76]	@ (80002b8 <PC13_Exti_Init+0x7c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a12      	ldr	r2, [pc, #72]	@ (80002b8 <PC13_Exti_Init+0x7c>)
 800026e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000272:	6013      	str	r3, [r2, #0]

	/*Select PORTC For EXTI13*/ // Section 8.2.6
	/*The values are zero by default so we dont have to clear every bit... if not it is mandatory to clear the bits*/
	SYSCFG->EXTICR[3] |= (1U << 5); //0010 FOR PC13
 8000274:	4b11      	ldr	r3, [pc, #68]	@ (80002bc <PC13_Exti_Init+0x80>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a10      	ldr	r2, [pc, #64]	@ (80002bc <PC13_Exti_Init+0x80>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6153      	str	r3, [r2, #20]

	/*Unmask EXTI13*/
	/*Mask = Ignore*/
	/* Uncover-- They are covered by default */ // Sec 10.3.1
	EXTI->IMR |= (1U << 13);
 8000280:	4b0f      	ldr	r3, [pc, #60]	@ (80002c0 <PC13_Exti_Init+0x84>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0e      	ldr	r2, [pc, #56]	@ (80002c0 <PC13_Exti_Init+0x84>)
 8000286:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800028a:	6013      	str	r3, [r2, #0]

	/*Select Falling edge Trigger*/ // Sec 10.3.4
	EXTI->FTSR	 |= (1U << 13);
 800028c:	4b0c      	ldr	r3, [pc, #48]	@ (80002c0 <PC13_Exti_Init+0x84>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	4a0b      	ldr	r2, [pc, #44]	@ (80002c0 <PC13_Exti_Init+0x84>)
 8000292:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000296:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR	 |= (1U << 13);
 8000298:	4b09      	ldr	r3, [pc, #36]	@ (80002c0 <PC13_Exti_Init+0x84>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4a08      	ldr	r2, [pc, #32]	@ (80002c0 <PC13_Exti_Init+0x84>)
 800029e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002a2:	6093      	str	r3, [r2, #8]


	/*Enable EXTI Line in NVIC*/
	//Enabling EXTI Lines from 10 to 15 as a part of core_cm4.h functions
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002a4:	2028      	movs	r0, #40	@ 0x28
 80002a6:	f7ff ffab 	bl	8000200 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002aa:	b662      	cpsie	i
}
 80002ac:	bf00      	nop

	/*Enable Global Interrupt  */
	__enable_irq(); // Built in function of ARM (feature)
}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020800 	.word	0x40020800
 80002bc:	40013800 	.word	0x40013800
 80002c0:	40013c00 	.word	0x40013c00

080002c4 <main>:
 *PRx This bit is set when the selected edge event arrives on the external interrupt line
 *PRx This bit is cleared by programming it to '1'*/


int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=GPIOAEN;
 80002c8:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <main+0x30>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002cc:	4a09      	ldr	r2, [pc, #36]	@ (80002f4 <main+0x30>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER |= (1U << 10);
 80002d4:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <main+0x34>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a07      	ldr	r2, [pc, #28]	@ (80002f8 <main+0x34>)
 80002da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11);
 80002e0:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <main+0x34>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <main+0x34>)
 80002e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002ea:	6013      	str	r3, [r2, #0]

	PC13_Exti_Init();
 80002ec:	f7ff ffa6 	bl	800023c <PC13_Exti_Init>
	//UART2TX_Init();
	while(1)
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <main+0x2c>
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40020000 	.word	0x40020000

080002fc <EXTI15_10_IRQHandler>:
/*And it must be a void (void) function*/
/*This can be found in the startup file */
/*  .word	EXTI15_10_IRQHandler         			EXTI Line[15:10] interrupts */

void EXTI15_10_IRQHandler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	if(EXTI->PR & LINE13)
 8000300:	4b0b      	ldr	r3, [pc, #44]	@ (8000330 <EXTI15_10_IRQHandler+0x34>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000308:	2b00      	cmp	r3, #0
 800030a:	d00b      	beq.n	8000324 <EXTI15_10_IRQHandler+0x28>
	{
		// Clear the PR Flag to rearm it
		EXTI->PR |=LINE13;
 800030c:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <EXTI15_10_IRQHandler+0x34>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a07      	ldr	r2, [pc, #28]	@ (8000330 <EXTI15_10_IRQHandler+0x34>)
 8000312:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000316:	6153      	str	r3, [r2, #20]
		// Do something
		GPIOA->ODR ^= LED;
 8000318:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <EXTI15_10_IRQHandler+0x38>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <EXTI15_10_IRQHandler+0x38>)
 800031e:	f083 0320 	eor.w	r3, r3, #32
 8000322:	6153      	str	r3, [r2, #20]

	}


}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40013c00 	.word	0x40013c00
 8000334:	40020000 	.word	0x40020000

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	@ (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	@ (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	@ (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	@ (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	@ (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	@ (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 f811 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800036a:	f7ff ffab 	bl	80002c4 <main>

0800036e <LoopForever>:

LoopForever:
  b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800037c:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 8000380:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000384:	2000001c 	.word	0x2000001c

08000388 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC_IRQHandler>
	...

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	4d0d      	ldr	r5, [pc, #52]	@ (80003c4 <__libc_init_array+0x38>)
 8000390:	4c0d      	ldr	r4, [pc, #52]	@ (80003c8 <__libc_init_array+0x3c>)
 8000392:	1b64      	subs	r4, r4, r5
 8000394:	10a4      	asrs	r4, r4, #2
 8000396:	2600      	movs	r6, #0
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	4d0b      	ldr	r5, [pc, #44]	@ (80003cc <__libc_init_array+0x40>)
 800039e:	4c0c      	ldr	r4, [pc, #48]	@ (80003d0 <__libc_init_array+0x44>)
 80003a0:	f000 f818 	bl	80003d4 <_init>
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	10a4      	asrs	r4, r4, #2
 80003a8:	2600      	movs	r6, #0
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
