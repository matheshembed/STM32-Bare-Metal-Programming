/* I2C

I2C - Inter Integrated Circuits
	- Also knows as Two Wire Interface

	I2C Has two lines SCL and SDA
	SCL:Serial Clock
		For synchronizing data transfer between the master and the slave.
	SDA:Serial Data
		Data line.

	Operation Modes
		-Master Transmitter
		-Master Receiver
		-Slave Transmitter
		-Slave Receiver
	***************************************************************************************************
	-Transactions are initiated and completed by the Master
	-All the messages have an address frame and a data frame.
	-Data is placed on the SDA line after SCL goes low, and it is sampled after the SCL line goes high.
	***************************************************************************************************

	***************************************************************************************************
	START and STOP Condition
	-All transactions begin with START and are terminated by STOP
	-A HIGH to LOW transition on the SDA line while SCL is HIGH defines a START condition
	-A LOW to HIGH transition on the SDA line while SCL is HIGH defines a START condition
	-START and STOP conditions are always generated by the master
	-The bus is considered to be free again a certain time after the STOP condition
	-The bus stays busy if a repeated START is generated instead of a STOP condition
	-Any information transmitted on the SDA line must be EIGHT Bits Long

	BYTE Format
	-The number of bytes that can be transmitted per transfer is unrestricted
	-Each Byte must be followed by an acknowledge (ACK) bit
	-Data is transferred with the most significant bit (MSB) first

	ADDRESS Frame
	-In any communication the address frame is first
	-For a 7-bit address, the address is sent out MSB first, followed by R/W bit indication whether this is a read(1) or write(0) Operation

	DATA Frame
	-The data frame begins transmission after the address frame is sent
	-The master will simply continue generating clock pulses on SCL at a regular interval,
		**and the data will be placed on SDA by either the master or the slave, depending on whether the R/W bit incdicated a read or write operation.

	Clock Speed
	-This is the speed of the I2C interface and should conrrespond with the bus speeds defined in the I2C specification
		Specification Defines the following Modes :
			Standard Mode	:	100 KHz Max
			Fast-Mode		:	400 KHz Max
			Fast-Mode Plus	: 	1 MHz
			High-Speed Mode : 	3.4 MHz

	DUTY CYCLE
		-Specifies the ratio between T_low and T_high of the I2C SCL Line
		-Possible Values:
			I2C_DUTYCYCLE_2	     	= 2:1
			I2C_DUTYCYCLE_16_9		= 16:9
		-By choosing the appropriate duty cycle we can pre-scale the peripheral clock to achieve the desired i2c speed

*/

#include "stm32f4xx.h"

#define GPIOB_CLK_EN				(1U<<2)


void I2C1_Init(void)
{
	/*Enable clock access to GPIOB ... That is wherer the I2C Is mapped.*/
	RCC->AHB1ENR |= GPIOB_CLK_EN;

	/*Set PB8 AND PB9 to alternate function
	 *Read Alternate Function Mapping in the datasheet
	 *PB6 and PB8-> I2C1_SCL
	 *PB7 and PB9-> I2C1_SDA
	 *We gonna use PB8 and PB9 Coz it is easily locatable in the nucleo board... Can go with the other ones.. All same.
	 ***AF4***/
	//PB8 Mode as AF (10)
	GPIOB->MODER |= (1U<<17);
	GPIOB->MODER &= ~(1U<<16);
	//PB9 Mode as AF (10)
	GPIOB->MODER |= (1U<<19);
	GPIOB->MODER &= ~(1U<<18);


	/*Set PB8 AND PB9 to Output type to Open drain*/
	GPIOB->OTYPER |= (1U <<8);
	GPIOB->OTYPER |= (1U <<9);


	/*Enable Pullup for PB8 AND PB9*/ //(10)
	GPIOB->PUPDR |=  (1U<<16);
	GPIOB->PUPDR &= ~(1U<<17);



	/*Enable The clock access (APB1)*/
}
