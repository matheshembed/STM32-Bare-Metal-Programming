
13_Timer_Output_Compare.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001d8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800039c  080003a4  000013a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800039c  0800039c  000013a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800039c  0800039c  000013a4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800039c  080003a4  000013a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800039c  0800039c  0000139c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003a0  080003a0  000013a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003a4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003a4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004d7  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000136  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  000019e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000046  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001982a  00000000  00000000  00001a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d34  00000000  00000000  0001b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec92  00000000  00000000  0001bffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aac8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a8  00000000  00000000  000aacd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000aad7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000384 	.word	0x08000384

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000384 	.word	0x08000384

08000204 <Tim2_PA5_Output_Compare>:
	/* Enable Timer*/
	TIM2->CR1 |= CR1_CEN ;
}

void Tim2_PA5_Output_Compare(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/*Enable clock access to gpioa*/
	 RCC->AHB1ENR |= GPIOAEN;
 8000208:	4b31      	ldr	r3, [pc, #196]	@ (80002d0 <Tim2_PA5_Output_Compare+0xcc>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a30      	ldr	r2, [pc, #192]	@ (80002d0 <Tim2_PA5_Output_Compare+0xcc>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30
	/*PA5 Mode to alternate function Mode*/
	 GPIOA->MODER |= (1U << 11);
 8000214:	4b2f      	ldr	r3, [pc, #188]	@ (80002d4 <Tim2_PA5_Output_Compare+0xd0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a2e      	ldr	r2, [pc, #184]	@ (80002d4 <Tim2_PA5_Output_Compare+0xd0>)
 800021a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800021e:	6013      	str	r3, [r2, #0]
	 GPIOA->MODER &= (~(1U << 10));
 8000220:	4b2c      	ldr	r3, [pc, #176]	@ (80002d4 <Tim2_PA5_Output_Compare+0xd0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a2b      	ldr	r2, [pc, #172]	@ (80002d4 <Tim2_PA5_Output_Compare+0xd0>)
 8000226:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800022a:	6013      	str	r3, [r2, #0]
	/*Alternate function Type to TIM2_CH1*/
	 GPIOA->AFR[0] |= (1U << 20);
 800022c:	4b29      	ldr	r3, [pc, #164]	@ (80002d4 <Tim2_PA5_Output_Compare+0xd0>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a28      	ldr	r2, [pc, #160]	@ (80002d4 <Tim2_PA5_Output_Compare+0xd0>)
 8000232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000236:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= (~(1U << 21));
 8000238:	4b26      	ldr	r3, [pc, #152]	@ (80002d4 <Tim2_PA5_Output_Compare+0xd0>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a25      	ldr	r2, [pc, #148]	@ (80002d4 <Tim2_PA5_Output_Compare+0xd0>)
 800023e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000242:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= (~(1U << 22));
 8000244:	4b23      	ldr	r3, [pc, #140]	@ (80002d4 <Tim2_PA5_Output_Compare+0xd0>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a22      	ldr	r2, [pc, #136]	@ (80002d4 <Tim2_PA5_Output_Compare+0xd0>)
 800024a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800024e:	6213      	str	r3, [r2, #32]
	 GPIOA->AFR[0] &= (~(1U << 23));
 8000250:	4b20      	ldr	r3, [pc, #128]	@ (80002d4 <Tim2_PA5_Output_Compare+0xd0>)
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	4a1f      	ldr	r2, [pc, #124]	@ (80002d4 <Tim2_PA5_Output_Compare+0xd0>)
 8000256:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800025a:	6213      	str	r3, [r2, #32]

	/* Enable Clock access to tim2*/
	/* Tim2 Is connected with APB1 BUS Runs at 45Mhz*/
	RCC->APB1ENR |= TIM2_EN;
 800025c:	4b1c      	ldr	r3, [pc, #112]	@ (80002d0 <Tim2_PA5_Output_Compare+0xcc>)
 800025e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000260:	4a1b      	ldr	r2, [pc, #108]	@ (80002d0 <Tim2_PA5_Output_Compare+0xcc>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6413      	str	r3, [r2, #64]	@ 0x40


	/* Set the Prescalar value*/
	/* Our default system clock is 16 Mhz */
	/* We want to the timer to end up at 1 Hz */
	TIM2->PSC = 1600 - 1; // We count from Zero so , we put minus 1 here
 8000268:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800026c:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000270:	629a      	str	r2, [r3, #40]	@ 0x28
	// 16 000 000/1600 = 10000

	/* Set the auto reload value*/
	TIM2->ARR = 10000 - 1; // We count from Zero so , we put minus 1 here again
 8000272:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000276:	f242 720f 	movw	r2, #9999	@ 0x270f
 800027a:	62da      	str	r2, [r3, #44]	@ 0x2c
	// 10 000 / 10 000 = 1 // Therefore we end up with 1 hertz

	/* Set Output_Compare Toggle Mode*/
	TIM2->CCMR1 |= (1U << 4);
 800027c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000280:	699b      	ldr	r3, [r3, #24]
 8000282:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000286:	f043 0310 	orr.w	r3, r3, #16
 800028a:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1U << 5);
 800028c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	6193      	str	r3, [r2, #24]
	/* Enable TIM2_CH1 in compare mode*/
	TIM2->CCER |= (1U << 0);
 800029c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a0:	6a1b      	ldr	r3, [r3, #32]
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6213      	str	r3, [r2, #32]


	/* Clear counter*/
	TIM2->CNT = 0;
 80002ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b0:	2200      	movs	r2, #0
 80002b2:	625a      	str	r2, [r3, #36]	@ 0x24

	/* Enable Timer*/
	TIM2->CR1 |= CR1_CEN ;
 80002b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020000 	.word	0x40020000

080002d8 <main>:
#define GPIOAEN		(1U<<0)
#define GPIOA_5		(1U<<5)
#define LED			GPIOA_5

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	Tim2_PA5_Output_Compare();
 80002dc:	f7ff ff92 	bl	8000204 <Tim2_PA5_Output_Compare>
 80002e0:	2300      	movs	r3, #0

}
 80002e2:	4618      	mov	r0, r3
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e8:	480d      	ldr	r0, [pc, #52]	@ (8000320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	@ (8000324 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	@ (8000328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	@ (800032c <LoopForever+0xe>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	@ (8000330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	@ (8000334 <LoopForever+0x16>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000316:	f000 f811 	bl	800033c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800031a:	f7ff ffdd 	bl	80002d8 <main>

0800031e <LoopForever>:

LoopForever:
  b LoopForever
 800031e:	e7fe      	b.n	800031e <LoopForever>
  ldr   r0, =_estack
 8000320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800032c:	080003a4 	.word	0x080003a4
  ldr r2, =_sbss
 8000330:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000334:	2000001c 	.word	0x2000001c

08000338 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC_IRQHandler>
	...

0800033c <__libc_init_array>:
 800033c:	b570      	push	{r4, r5, r6, lr}
 800033e:	4d0d      	ldr	r5, [pc, #52]	@ (8000374 <__libc_init_array+0x38>)
 8000340:	4c0d      	ldr	r4, [pc, #52]	@ (8000378 <__libc_init_array+0x3c>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	2600      	movs	r6, #0
 8000348:	42a6      	cmp	r6, r4
 800034a:	d109      	bne.n	8000360 <__libc_init_array+0x24>
 800034c:	4d0b      	ldr	r5, [pc, #44]	@ (800037c <__libc_init_array+0x40>)
 800034e:	4c0c      	ldr	r4, [pc, #48]	@ (8000380 <__libc_init_array+0x44>)
 8000350:	f000 f818 	bl	8000384 <_init>
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	10a4      	asrs	r4, r4, #2
 8000358:	2600      	movs	r6, #0
 800035a:	42a6      	cmp	r6, r4
 800035c:	d105      	bne.n	800036a <__libc_init_array+0x2e>
 800035e:	bd70      	pop	{r4, r5, r6, pc}
 8000360:	f855 3b04 	ldr.w	r3, [r5], #4
 8000364:	4798      	blx	r3
 8000366:	3601      	adds	r6, #1
 8000368:	e7ee      	b.n	8000348 <__libc_init_array+0xc>
 800036a:	f855 3b04 	ldr.w	r3, [r5], #4
 800036e:	4798      	blx	r3
 8000370:	3601      	adds	r6, #1
 8000372:	e7f2      	b.n	800035a <__libc_init_array+0x1e>
 8000374:	0800039c 	.word	0x0800039c
 8000378:	0800039c 	.word	0x0800039c
 800037c:	0800039c 	.word	0x0800039c
 8000380:	080003a0 	.word	0x080003a0

08000384 <_init>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr

08000390 <_fini>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr
