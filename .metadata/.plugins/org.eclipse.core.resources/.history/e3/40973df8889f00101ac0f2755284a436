/*
#include "Exti.h"
#include "uart.h"
#define GPIOAEN		(1U << 0)
#define LED			(1U << 5)

static void EXTI_CallBack(void);


Pending Register EXTI_PR
 *0 - No trigger request occured
 *1 - Selected trigger request occured
 *PRx This bit is set when the selected edge event arrives on the external interrupt line
 *PRx This bit is cleared by programming it to '1'


int main(void)
{
	RCC->AHB1ENR |=GPIOAEN;

	GPIOA->MODER |= (1U << 10);
	GPIOA->MODER &= ~(1U << 11);

	PC13_Exti_Init();
	UART2TX_Init();
	while(1)
	{

	}

}





The name of the function has to exactly this .. coz this is defined in the vector table
And it must be a void (void) function
This can be found in the startup file
  .word	EXTI15_10_IRQHandler         			EXTI Line[15:10] interrupts

static void EXTI_CallBack(void)
{
	printf("PC13 button Pressed");
	GPIOA->ODR ^= LED;
}

void EXTI15_10_IRQHandler(void)
{
	if((EXTI->PR & LINE13)!=0)
	{
		// Clear the PR Flag to rearm it
		EXTI->PR =LINE13;
		// Do something
		EXTI_CallBack();

	}

}
*/

#include "stm32f4xx.h"
#define LED     (1U << 5)
#define LINE13  (1U << 13)

void PC13_Exti_Init(void)
{
    RCC->AHB1ENR |= (1U << 2);   // Enable GPIOC
    RCC->APB2ENR |= (1U << 14);  // Enable SYSCFG

    GPIOC->MODER &= ~(3U << 26); // PC13 input

    SYSCFG->EXTICR[3] &= ~(0xF << 4); // Clear
    SYSCFG->EXTICR[3] |=  (0x2 << 4); // Port C

    EXTI->IMR  |= LINE13;  // Unmask
    EXTI->FTSR |= LINE13;  // Falling edge
    EXTI->PR    = LINE13;  // Clear pending

    NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void EXTI15_10_IRQHandler(void)
{
    if (EXTI->PR & LINE13)
    {
        EXTI->PR = LINE13;           // Clear flag
        GPIOA->ODR ^= LED;           // Toggle LED
    }
}

int main(void)
{
    RCC->AHB1ENR |= (1U << 0);       // Enable GPIOA
    GPIOA->MODER &= ~(3U << 10);
    GPIOA->MODER |=  (1U << 10);     // PA5 output

    PC13_Exti_Init();

    __enable_irq();

    while(1); // idle loop
}

