
5_UART_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000400  08000408  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000400  08000400  00001408  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000400  08000400  00001408  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000400  08000408  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000400  08000400  00001400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000404  08000404  00001404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000408  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000408  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000474  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000018a  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00001a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000045  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018aa4  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000006c8  00000000  00000000  0001a589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1f8  00000000  00000000  0001ac51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5e49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  000a5e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000a5f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003e8 	.word	0x080003e8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080003e8 	.word	0x080003e8

08000204 <main>:
static uint16_t Compute_Uart_Bd(uint32_t PeriClk, uint32_t BaudrRate);
void UART2TX_Init(void);
void Uart2_Write(char ch);


int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0

	UART2TX_Init();
 800020a:	f000 f811 	bl	8000230 <UART2TX_Init>


	while(1){

		Uart2_Write('M');
 800020e:	204d      	movs	r0, #77	@ 0x4d
 8000210:	f000 f85e 	bl	80002d0 <Uart2_Write>
		for(int i=0; i<100000; i++){
 8000214:	2300      	movs	r3, #0
 8000216:	607b      	str	r3, [r7, #4]
 8000218:	e002      	b.n	8000220 <main+0x1c>
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	3301      	adds	r3, #1
 800021e:	607b      	str	r3, [r7, #4]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	4a02      	ldr	r2, [pc, #8]	@ (800022c <main+0x28>)
 8000224:	4293      	cmp	r3, r2
 8000226:	ddf8      	ble.n	800021a <main+0x16>
		Uart2_Write('M');
 8000228:	e7f1      	b.n	800020e <main+0xa>
 800022a:	bf00      	nop
 800022c:	0001869f 	.word	0x0001869f

08000230 <UART2TX_Init>:
		}

	}
}

void UART2TX_Init(void){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	// To initialize the uart we have to make the gpio as the alternate function which is



	// Clock access to the GPIOA
	RCC->AHB1ENR |=  GPIOAEN ;
 8000234:	4b21      	ldr	r3, [pc, #132]	@ (80002bc <UART2TX_Init+0x8c>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000238:	4a20      	ldr	r2, [pc, #128]	@ (80002bc <UART2TX_Init+0x8c>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6313      	str	r3, [r2, #48]	@ 0x30

	// Setting PA2 to alternate function mode
	GPIOA->MODER |=  (1U << 5); //1
 8000240:	4b1f      	ldr	r3, [pc, #124]	@ (80002c0 <UART2TX_Init+0x90>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a1e      	ldr	r2, [pc, #120]	@ (80002c0 <UART2TX_Init+0x90>)
 8000246:	f043 0320 	orr.w	r3, r3, #32
 800024a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~((1U << 4));//0
 800024c:	4b1c      	ldr	r3, [pc, #112]	@ (80002c0 <UART2TX_Init+0x90>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a1b      	ldr	r2, [pc, #108]	@ (80002c0 <UART2TX_Init+0x90>)
 8000252:	f023 0310 	bic.w	r3, r3, #16
 8000256:	6013      	str	r3, [r2, #0]

	// Set PA2 to alternate function tyoe to UART_TX (AF7)
	// AFRL REGISTER DUE THE USART IS CONNECTED TO THE GPIO PIN 2
	GPIOA->AFR[0] &= (~(1U << 11));
 8000258:	4b19      	ldr	r3, [pc, #100]	@ (80002c0 <UART2TX_Init+0x90>)
 800025a:	6a1b      	ldr	r3, [r3, #32]
 800025c:	4a18      	ldr	r2, [pc, #96]	@ (80002c0 <UART2TX_Init+0x90>)
 800025e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000262:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10);
 8000264:	4b16      	ldr	r3, [pc, #88]	@ (80002c0 <UART2TX_Init+0x90>)
 8000266:	6a1b      	ldr	r3, [r3, #32]
 8000268:	4a15      	ldr	r2, [pc, #84]	@ (80002c0 <UART2TX_Init+0x90>)
 800026a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800026e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9);
 8000270:	4b13      	ldr	r3, [pc, #76]	@ (80002c0 <UART2TX_Init+0x90>)
 8000272:	6a1b      	ldr	r3, [r3, #32]
 8000274:	4a12      	ldr	r2, [pc, #72]	@ (80002c0 <UART2TX_Init+0x90>)
 8000276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800027a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 8);
 800027c:	4b10      	ldr	r3, [pc, #64]	@ (80002c0 <UART2TX_Init+0x90>)
 800027e:	6a1b      	ldr	r3, [r3, #32]
 8000280:	4a0f      	ldr	r2, [pc, #60]	@ (80002c0 <UART2TX_Init+0x90>)
 8000282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000286:	6213      	str	r3, [r2, #32]

	// Enable the Clock access to the UART 2
	RCC->APB1ENR |=  UART2EN ;
 8000288:	4b0c      	ldr	r3, [pc, #48]	@ (80002bc <UART2TX_Init+0x8c>)
 800028a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800028c:	4a0b      	ldr	r2, [pc, #44]	@ (80002bc <UART2TX_Init+0x8c>)
 800028e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000292:	6413      	str	r3, [r2, #64]	@ 0x40

	// Configure the Baud rate
	Uart_Set_Bd(USART2, APB1_CLK, UART_BAUDRATE);
 8000294:	4a0b      	ldr	r2, [pc, #44]	@ (80002c4 <UART2TX_Init+0x94>)
 8000296:	490c      	ldr	r1, [pc, #48]	@ (80002c8 <UART2TX_Init+0x98>)
 8000298:	480c      	ldr	r0, [pc, #48]	@ (80002cc <UART2TX_Init+0x9c>)
 800029a:	f000 f831 	bl	8000300 <Uart_Set_Bd>

	// Configure the transfer direction
	// I want to clear every bits of the register and set only the 3 pin that is why we are not usig the OR operator
	USART2->CR1 |= USART2_CR1;
 800029e:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <UART2TX_Init+0x9c>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4a0a      	ldr	r2, [pc, #40]	@ (80002cc <UART2TX_Init+0x9c>)
 80002a4:	f043 0308 	orr.w	r3, r3, #8
 80002a8:	60d3      	str	r3, [r2, #12]
	//Since we are already written the value in the CR1 Register ourself we dont want it to be vanished .. we need that ... so using the OR Operator as usual.
	USART2->CR1 |= UART_EN;
 80002aa:	4b08      	ldr	r3, [pc, #32]	@ (80002cc <UART2TX_Init+0x9c>)
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	4a07      	ldr	r2, [pc, #28]	@ (80002cc <UART2TX_Init+0x9c>)
 80002b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002b4:	60d3      	str	r3, [r2, #12]
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40020000 	.word	0x40020000
 80002c4:	0001b774 	.word	0x0001b774
 80002c8:	00f42400 	.word	0x00f42400
 80002cc:	40004400 	.word	0x40004400

080002d0 <Uart2_Write>:

void Uart2_Write(char ch){
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	// Make sure the transmit data register is empty before writing the data to it
	// Then Write to transmit data register

	// 0 => Data is not transferred to the shift register
	// 1 =>  Data is transferred to the shift register
	while(!(USART2->SR & UART_SR_TXE));
 80002da:	bf00      	nop
 80002dc:	4b07      	ldr	r3, [pc, #28]	@ (80002fc <Uart2_Write+0x2c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d0f9      	beq.n	80002dc <Uart2_Write+0xc>

	// Write to the Transmit data register
	USART2->DR =  (ch & 0xFF);
 80002e8:	4a04      	ldr	r2, [pc, #16]	@ (80002fc <Uart2_Write+0x2c>)
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	6053      	str	r3, [r2, #4]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40004400 	.word	0x40004400

08000300 <Uart_Set_Bd>:
static void Uart_Set_Bd(USART_TypeDef *USARTx, uint32_t PeriClk, uint32_t BaudRate){
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]

	USARTx->BRR = Compute_Uart_Bd(PeriClk,BaudRate);
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	68b8      	ldr	r0, [r7, #8]
 8000310:	f000 f808 	bl	8000324 <Compute_Uart_Bd>
 8000314:	4603      	mov	r3, r0
 8000316:	461a      	mov	r2, r3
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	609a      	str	r2, [r3, #8]
}
 800031c:	bf00      	nop
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <Compute_Uart_Bd>:

static uint16_t Compute_Uart_Bd(uint32_t PeriClk, uint32_t BaudRate){
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]

	return ((PeriClk + (BaudRate/2U))/BaudRate);
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	085a      	lsrs	r2, r3, #1
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	441a      	add	r2, r3
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	fbb2 f3f3 	udiv	r3, r2, r3
 800033c:	b29b      	uxth	r3, r3
}
 800033e:	4618      	mov	r0, r3
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
	...

0800034c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800034c:	480d      	ldr	r0, [pc, #52]	@ (8000384 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000350:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000354:	480c      	ldr	r0, [pc, #48]	@ (8000388 <LoopForever+0x6>)
  ldr r1, =_edata
 8000356:	490d      	ldr	r1, [pc, #52]	@ (800038c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000358:	4a0d      	ldr	r2, [pc, #52]	@ (8000390 <LoopForever+0xe>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800035c:	e002      	b.n	8000364 <LoopCopyDataInit>

0800035e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000362:	3304      	adds	r3, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000368:	d3f9      	bcc.n	800035e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800036c:	4c0a      	ldr	r4, [pc, #40]	@ (8000398 <LoopForever+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000370:	e001      	b.n	8000376 <LoopFillZerobss>

08000372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000374:	3204      	adds	r2, #4

08000376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000378:	d3fb      	bcc.n	8000372 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800037a:	f000 f811 	bl	80003a0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800037e:	f7ff ff41 	bl	8000204 <main>

08000382 <LoopForever>:

LoopForever:
  b LoopForever
 8000382:	e7fe      	b.n	8000382 <LoopForever>
  ldr   r0, =_estack
 8000384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800038c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000390:	08000408 	.word	0x08000408
  ldr r2, =_sbss
 8000394:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000398:	2000001c 	.word	0x2000001c

0800039c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC_IRQHandler>
	...

080003a0 <__libc_init_array>:
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	4d0d      	ldr	r5, [pc, #52]	@ (80003d8 <__libc_init_array+0x38>)
 80003a4:	4c0d      	ldr	r4, [pc, #52]	@ (80003dc <__libc_init_array+0x3c>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	2600      	movs	r6, #0
 80003ac:	42a6      	cmp	r6, r4
 80003ae:	d109      	bne.n	80003c4 <__libc_init_array+0x24>
 80003b0:	4d0b      	ldr	r5, [pc, #44]	@ (80003e0 <__libc_init_array+0x40>)
 80003b2:	4c0c      	ldr	r4, [pc, #48]	@ (80003e4 <__libc_init_array+0x44>)
 80003b4:	f000 f818 	bl	80003e8 <_init>
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	10a4      	asrs	r4, r4, #2
 80003bc:	2600      	movs	r6, #0
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d105      	bne.n	80003ce <__libc_init_array+0x2e>
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c8:	4798      	blx	r3
 80003ca:	3601      	adds	r6, #1
 80003cc:	e7ee      	b.n	80003ac <__libc_init_array+0xc>
 80003ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d2:	4798      	blx	r3
 80003d4:	3601      	adds	r6, #1
 80003d6:	e7f2      	b.n	80003be <__libc_init_array+0x1e>
 80003d8:	08000400 	.word	0x08000400
 80003dc:	08000400 	.word	0x08000400
 80003e0:	08000400 	.word	0x08000400
 80003e4:	08000404 	.word	0x08000404

080003e8 <_init>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr

080003f4 <_fini>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr
